{"version":3,"sources":["icon.png","Results.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Results","props","state","selection","response","this","query","chrome","extension","getBackgroundPage","window","getSelection","toString","text","setState","body","fetch","method","headers","JSON","stringify","then","res","json","result","catch","err","Component","App","className","class","Boolean","location","hostname","match","runtime","onMessage","addListener","request","sender","sendResponse","alert","tabs","executeScript","code","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"qLAAAA,EAAOC,QAAU,IAA0B,kC,gLCuE5BC,E,kDAnEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAW,oBACXC,SAAU,OAJK,E,gEASjBC,KAAKC,MAAMC,OAAOC,UAAUC,oBAAoBC,OAAOC,aAAaC,c,qEAG1DC,G,8EAEV,KAAKC,SAAS,CACZX,UAAWU,IAETE,EAAO,CAET,MAASF,GAGC,qCACZG,MADY,qCAEV,CAEEC,OAAQ,OACRC,QAAS,CAEP,OAAU,mBACV,eAAgB,oBAIpBH,KAAMI,KAAKC,UAAUL,KAEtBM,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAEZF,MAAK,SAAAG,GACJ,EAAKV,SAAS,CACZV,SAAU,UAAYe,KAAKC,UAAUI,QAGxCC,OAAM,SAAAC,GAEL,EAAKZ,SAAS,CACZV,SAAU,UAAYsB,O,sIAQ1B,OACE,oDAEG,KAAKxB,MAAMC,UACZ,6BAHF,sBAKG,KAAKD,MAAME,c,GA9DEuB,aCsBPC,G,mLAjBX,OACE,yBAAKC,UAAU,OACb,yDAGA,yBAAKC,MAAM,YACT,yBAAKA,MAAM,kBAEb,sEAGA,kBAAC,EAAD,W,GAbUH,cCMEI,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCXN3B,OAAO4B,QAAQC,UAAUC,aAAY,SAACC,EAASC,EAAQC,GACrDC,MAAM,qBAAsBH,GAC5B/B,OAAOmC,KAAKC,cAAc,CACxBC,KAAM,oDAIVC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd7B,OAAM,SAAA8B,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4cf14e38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.41fdc527.png\";"," /*global chrome*/\nimport React, { Component } from 'react';\n\nclass Results extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selection: \"initial selection\",\n      response: \"...\"\n    };\n  }\n\n  componentDidMount() {\n    this.query(chrome.extension.getBackgroundPage().window.getSelection.toString());\n  }\n\n  async query(text) { \n    this.setState({\n      selection: text,\n    })\n    var body = { \n      \"query\": text\n    } \n    const url = \"https://covid-api.arjungandhi.com/\"\n    fetch(url,\n      { \n        method: \"POST\",\n        headers: { \n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\" \n      }, \n      body: JSON.stringify(body)\n    })\n    .then(res => {\n      return res.json()\n    })\n    .then(result => {\n      this.setState({\n        response: \" meeps \" + JSON.stringify(result)\n      })\n    })\n    .catch(err => { \n      this.setState({\n        response: \"error: \" + err\n      })\n    }) \n  } \n\n  render() {\n    return (\n      <div>\n        this.state.selection\n        {this.state.selection}\n        <br/>\n        this.state.response\n        {this.state.response}\n      </div>\n    )\n  }\n}\n\nexport default Results;\n","import React, { Component } from 'react';\nimport logo from './icon.png';\nimport Results from './Results.js';\nimport './App.css';\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>\n          Coronovirus Fact-Checking\n        </h1>\n        <div class=\"progress\">\n          <div class=\"progress-bar\" />\n        </div>\n        <h2>\n          Fighting the spread of misinformation.\n        </h2>\n        <Results/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*global chrome*/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  alert(\"Message received: \", request);\n  chrome.tabs.executeScript({\n    code: 'document.body.style.backgroundColor=\"orange\"'\n  });\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}